from __future__ import absolute_import
from __future__ import print_function
from __future__ import division

import tensorflow as tf
from tensorflow.python.platform import gfile
import os
import re

mean = [[ 21.00480275 , 58.0225223 ],
 [ 21.55486552 , 82.73957843],
 [ 24.12099648, 107.37859625],
 [ 29.17383272, 131.46801145],
 [ 38.58484047, 153.75489635],
 [ 52.87578537, 173.02867817],
 [ 70.37332399, 189.11593083],
 [ 89.83368208, 201.93743293],
 [112.        , 205.7893783 ],
 [134.16631792, 201.93743293],
 [153.62667601, 189.11593083],
 [171.12421463, 173.02867817],
 [185.41515953, 153.75489635],
 [194.82616728, 131.46801145],
 [199.87900352, 107.37859625],
 [202.44513448,  82.73957843],
 [202.99524884,  58.0225223 ],
 [ 38.71339997,  39.75130057],
 [ 49.96122672,  29.42508046],
 [ 65.97327843,  26.37285848],
 [ 82.59588014,  28.78878271],
 [ 97.91277561,  35.48056264],
 [126.08722439,  35.48056264],
 [141.40411986,  28.78878271],
 [158.02672157,  26.37285848],
 [174.03877328,  29.42508046],
 [185.28660003,  39.75130057],
 [112.        ,  54.31716377],
 [112.        ,  70.05400369],
 [112.        ,  85.6624557 ],
 [112.        , 101.72156458],
 [ 92.89845997, 112.91820172],
 [102.07428645, 116.37850451],
 [112.        , 119.23415026],
 [121.92571355, 116.37850451],
 [131.10154003, 112.91820172],
 [ 56.55063875,  56.6085303 ],
 [ 66.52582013,  50.93989963],
 [ 78.56989099,  51.06688129],
 [ 89.17010514,  58.92762009],
 [ 77.94895695,  60.84754761],
 [ 65.93216835,  60.72973599],
 [134.82989486,  58.92762009],
 [145.43010901,  51.06688129],
 [157.47417987,  50.93989963],
 [167.44936125,  56.6085303 ],
 [158.06783165,  60.72973599],
 [146.05104305,  60.84754761],
 [ 76.50617632, 142.93901447],
 [ 89.4742422 , 137.08168782],
 [102.72756358, 134.13387943],
 [112.        , 136.44769314],
 [121.27243642, 134.13387943],
 [134.5257578 , 137.08168782],
 [147.49382368, 142.93901447],
 [134.9252599 , 156.11551664],
 [122.08117111, 161.89075695],
 [112.        , 162.96153173],
 [101.91882889, 161.89075695],
 [ 89.0747401 , 156.11551664],
 [ 81.93277984, 143.59539732],
 [102.61662915, 142.04493824],
 [112.        , 142.99977963],
 [121.38337085, 142.04493824],
 [142.06722016, 143.59539732],
 [121.57953362, 149.96802395],
 [112.        , 151.14191428],
 [102.42046638, 149.96802395]]

std = [[11.0822252,  21.47153398],
 [10.73827811, 19.5077698 ],
 [11.66599505, 18.25502507],
 [13.36619552, 17.53469295],
 [15.58861989, 16.50811584],
 [18.41833039, 14.84385278],
 [21.82128783, 12.81733283],
 [25.35639708, 11.05028219],
 [26.7103014 , 10.39548045],
 [25.35639708, 11.05028219],
 [21.82128783, 12.81733283],
 [18.41833039, 14.84385278],
 [15.58861989, 16.50811584],
 [13.36619552, 17.53469295],
 [11.66599505, 18.25502507],
 [10.73827811, 19.5077698 ],
 [11.08232298, 21.47153398],
 [19.78937261, 16.58832298],
 [22.71948463, 15.11068481],
 [24.82361585, 14.09783786],
 [26.74142019, 13.4029719 ],
 [28.29882475, 12.97487745],
 [28.29882475, 12.97487745],
 [26.74142019, 13.4029719 ],
 [24.82361585, 14.09783786],
 [22.71948463, 15.11068481],
 [19.78937261, 16.58832298],
 [27.93712914, 12.29334254],
 [29.56801094, 12.63236535],
 [31.72985082, 13.90104236],
 [34.0539368,  15.7212125 ],
 [27.72532618, 12.88142765],
 [28.87222857, 12.911281  ],
 [29.5597815 , 13.17079955],
 [28.87222857, 12.911281  ],
 [27.72532618, 12.88142765],
 [20.56251199, 14.11397418],
 [21.92889164, 13.74003332],
 [22.19572564, 12.91099389],
 [21.81389134, 11.92518806],
 [21.81741539, 12.63416695],
 [21.52531663, 13.35566969],
 [21.81389134, 11.92518806],
 [22.19572564, 12.91099389],
 [21.92889164, 13.74003332],
 [20.56251199, 14.11397418],
 [21.52531663, 13.35566969],
 [21.81741539, 12.63416695],
 [22.36964235, 13.45420839],
 [25.61143247, 13.51597653],
 [27.79822627, 13.76138747],
 [28.12200273, 13.94090191],
 [27.79822627, 13.76138747],
 [25.61143247, 13.51597653],
 [22.36964235, 13.45420839],
 [25.52483464, 12.34190657],
 [27.63161338, 12.70821869],
 [27.92973296, 12.76224591],
 [27.63161338, 12.70821869],
 [25.52483464, 12.34190657],
 [22.76256439, 12.93024068],
 [27.55000706, 13.78321771],
 [27.88935714, 13.86892209],
 [27.55000706, 13.78321771],
 [22.76256439, 12.93024068],
 [27.49413188, 11.85920083],
 [27.79357994, 11.92195181],
 [27.49413188, 11.85920083]]

def get_model_filenames(model_dir):
    model_dir = os.path.expanduser(model_dir)
    files = os.listdir(model_dir)
    meta_files = [s for s in files if s.endswith('.meta')]
    if len(meta_files) == 0:
        raise ValueError('No meta file found in the model directory %s' %model_dir)
    meta_file = meta_files[0]
    ckpt = tf.train.get_checkpoint_state(model_dir)
    if ckpt and ckpt.model_checkpoint_path:
        ckpt_file = os.path.basename(ckpt.model_checkpoint_path)
        print('file: ', ckpt_file)
        print('path: ', ckpt.model_checkpoint_path)
        if len(ckpt_file.split('-')) == 1:
            step = 0
        else:
            step = ckpt_file.split('-')[-1]
        return meta_file, ckpt_file, step

def load_model(sess, model_dir):
    model_exp = os.path.expanduser(model_dir)
    if os.path.isfile(model_exp): # pb
        print('model name %s' %model_exp)
        with gfile.FastGFile(model_exp, 'rb') as fp:
            graph_def = tf.GraphDef()
            graph_def.ParseFromString(fp.read())
            tf.import_graph_def(graph_def, name='')
    else:
        print('model directory %s' %model_exp)
        meta_file, ckpt_file, step = get_model_filenames(model_exp)
        print('meta_file %s' %meta_file)
        print('ckpt_file %s' %ckpt_file)
        saver = tf.train.import_meta_graph(os.path.join(model_exp, meta_file))
        saver.restore(sess, os.path.join(model_exp, ckpt_file))
        return step

def show_op_name():
    graph = tf.get_default_graph()
    operas = graph.get_operations()
    ops_names = [ops.name.split(':',1)[0] for ops in operas]
    for name in ops_names:
        # if name.startswith('alexnet_v2'):
        print(name)

def show_var_name():
    vars = tf.all_variables()
    var_names = [var.name.split(':', 1)[0] for var in vars]
    # for var in vars:
    #     print(var.get_shape())
    for name in var_names:
        print(name)

def show_tensor():
    graph_def = tf.get_default_graph().as_graph_def()
    graph = tf.get_default_graph()
    nodes = graph_def.node
    for node in nodes:
        tensor = graph.get_tensor_by_name(node.name+':0')
        print('name: %s\t shape: %s' %(tensor.name, tensor.get_shape()))

# get_model_filenames('/home/public/nfs132_1/hanfy/models/align_model')
